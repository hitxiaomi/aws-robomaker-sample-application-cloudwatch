#!/usr/bin/env python

import rospy
import time
import os

from rosgraph_msgs.msg import Clock
from ros_monitoring_msgs.msg import MetricList
from robomaker_simulation_msgs.msg import Tag
from robomaker_simulation_msgs.srv import Cancel, AddTags

ts = time.time()
test_name = "Robot_Monitoring_Tests_" + str(ts).split(".", 1)[0]
is_cancelled = False
is_completed = False
navigation_success_count = int(os.environ['NAVIGATION_SUCCESS_COUNT'])
successful_navigations = 0
latch = False

def cancel_job():
    
    set_tag(name=test_name + "_Time_Elapsed_End", value=str(time.time()).split(".", 1)[0])
    
    # proxy for simulation job cancel 
    rospy.wait_for_service('/robomaker/job/cancel')
    requestCancel = rospy.ServiceProxy('/robomaker/job/cancel', Cancel)
    response = requestCancel()
    if response.success:
        global is_cancelled
        is_cancelled = True
        rospy.loginfo("Successfully requested cancel job")
    else:
        rospy.logerr("Cancel request failed: %s", response.message)

def set_tag(name, value):
    print("Name: ", name)
    print("Value: ", value)
    rospy.wait_for_service('/robomaker/job/add_tags')
    requestAddTags = rospy.ServiceProxy('/robomaker/job/add_tags', AddTags)
    tags = ([Tag(key=name, value=value)])
    response = requestAddTags(tags)
    if response.success:
        rospy.loginfo("Successfully added tags: %s", tags)
    else:
        rospy.logerr("Add tags request failed for tags (%s): %s", tags, response.message)


def check_complete(msgs):
    for msg in msgs.metrics:
        if msg.metric_name == "distance_to_goal":
            print("found: ", msg.metric_name)
            print("value: ", msg.value)
            if msg.value == 0.0 and is_completed == False and latch == False:
                global successful_navigations
                global latch
                latch = True;
                successful_navigations = successful_navigations + 1
                set_tag(name=test_name + "_Successful_Nav_" + str(successful_navigations), value=str(successful_navigations))
                if successful_navigations == navigation_success_count:
                    is_completed == True
                    print("Test pass")
                    set_tag(name=test_name, value="Passed")
                    cancel_job()
            elif msg.value > 1 and is_completed == False:
                latch = False

def run_test():
    rospy.init_node('run_test')
    set_tag(name=test_name + "_Time_Elapsed_Start", value= str(time.time()).split(".", 1)[0])
    clock = rospy.Subscriber('/metrics', MetricList, check_complete)
    rospy.spin()

if __name__ == "__main__":
    run_test()            